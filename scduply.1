.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "SCDUPLY 1"
.TH SCDUPLY 1 "2011-11-30" "Version 1.5.2.3-sc.1.2" "scduply documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
scduply \- a shell frontend to duplicity for simplified backups
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBscduply\fR \fBinit\fR
.PP
\&\fBscduply\fR \fIprofile\fR \fBcreate\fR
.PP
\&\fBscduply\fR \fIprofile command [options ...]\fR
.PP
\&\fBscduply\fR \fIprofile command[_command_...] [options ...]\fR
.PP
\&\fBscduply\fR \fBbkpall\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBSkyCover Duply (scduply)\fR deals as a wrapper for the mighty
duplicity magic.
It simplifies confiruring and running duplicity with cron or on command line:
  \- Permits to define the new backup job in few seconds.
  \- Simplifies the tuning for file inclusions and exclusions.
  \- User friendly, clear syntax of config files.
  \- Able to execute and check pre- and post-job scripts.
  \- Gives useful commands for backup and restore.
  \- Saves the backup logs, create and mail HTML reports.
.PP
For each backup job one configuration profile must be created.
The profile folder will be stored under \fI~/.scduply/<profile\fR>
(where '~' is the current users home directory).
.PP
\&\fIHint\fR: If the folder \fI/etc/scduply\fR exists the profiles for the super 
user root will be searched and created there.
.SH "USAGE"
.IX Header "USAGE"
Initialization.
The global config file \fI~/.scduply/conf\fR will be created
.PP
.Vb 1
\&    scduply init
.Ve
.PP
The backup job profile creation.
.PP
.Vb 1
\&    scduply <profile> create
.Ve
.PP
Execute all jobs, generate report
.PP
.Vb 1
\&    scduply bkpall
.Ve
.PP
General usage in single mode (see \s-1EXAMPLES\s0):
.PP
.Vb 1
\&    scduply <profile> <command> [<options> ...]
.Ve
.PP
General usage in batch mode joining commands with '_' (see \s-1EXAMPLES\s0):
.PP
.Vb 1
\&    scduply <profile> <command1>_<command2>[_<command3>...] [<options> ...]
.Ve
.PP
Non scduply options are passed on to duplicity (see \s-1OPTIONS\s0).
.SH "PROFILE"
.IX Header "PROFILE"
.SS "location for profiles"
.IX Subsection "location for profiles"
Indicated by a profile name i.e. \fIsample\fR, which is resolved to 
\&\fI~/.scduply/sample\fR ('~' expands to environment variable \f(CW$HOME\fR).
.PP
Superuser root can place profiles under \fI/etc/scduply\fR if the
folder is manually created before running scduply.
.PP
\&\s-1ATTENTION:\s0 If \fI/etc/scduply/\fR is created, old profiles under \fI/root/.scduply/\fR
have to be moved manually to the former or will cease to work.
.SS "using profiles"
.IX Subsection "using profiles"
Usually only the profile name will be used:
.PP
.Vb 1
\&    scduply humbug backup
.Ve
.PP
Alternatively a \fIpath\fR might be used. This might be useful for quick testing, 
restoring or exotic locations. The global configuration file in this case will not be used. Shell expansion should work as usual:
.PP
.Vb 1
\&    scduply ~/.scduply/humbug backup
.Ve
.PP
\&\s-1ATTENTION:\s0 The path must contain at least one '/', e.g \fI./test\fR instead of
only \fItest\fR.
.SH "COMMANDS"
.IX Header "COMMANDS"
.IP "\fBusage\fR" 8
.IX Item "usage"
Get usage help text.
.IP "\fBinit\fR" 8
.IX Item "init"
Creates a top configuration folder and a global config.
It is not mandatory, because is also invoked with the first "create" command.
.IP "\fBcreate\fR" 8
.IX Item "create"
Creates a configuration profile for the particular backup job.
.IP "\fBbackup\fR" 8
.IX Item "backup"
Backup with pre/post script execution (as batch the same as: pre_bkp_post)
.RS 8
.IP "\(bu" 2
as \fIfull\fR backup if parameter full_if_older matches or no earlier backup is found.
.IP "\(bu" 2
as \fIincremental\fR backup in all other cases.
.RE
.RS 8
.RE
.IP "\fBbkp\fR" 8
.IX Item "bkp"
As above but without executing pre/post scripts.
.IP "\fBbkpall\fR" 8
.IX Item "bkpall"
Sequentally execute backup for all profiles.
If profile has the file "skip", it will be skipped.
.IP "\fBfull\fR" 8
.IX Item "full"
Force full backup.
.IP "\fBincr\fR" 8
.IX Item "incr"
Force incremental backup.
.IP "\fBlist\fR \fI[age]\fR" 8
.IX Item "list [age]"
List all files in backup (as it was at \fIage\fR, default: now).
.IP "\fBstatus\fR" 8
.IX Item "status"
Prints backup sets and chains currently in repository.
.IP "\fBverify\fR" 8
.IX Item "verify"
List files changed since latest backup.
.IP "\fBpurge\fR \fI[\-\-force]\fR" 8
.IX Item "purge [--force]"
Shows outdated backup archives (older than \f(CW$MAX_AGE\fR).
Option \fI\-\-force\fR delete these files.
.IP "\fBpurge-full\fR \fI[\-\-force]\fR" 8
.IX Item "purge-full [--force]"
Shows outdated backups (more than \f(CW$MAX_FULL_BACKUPS\fR), the number of
\&\fIrecent\fR full backups and associated incrementals to keep.
Option \fI\-\-force\fR delete these files.
.IP "\fBcleanup\fR \fI[\-\-force]\fR" 8
.IX Item "cleanup [--force]"
Shows broken backup archives (e.g. after unfinished run).
Option \fI\-\-force\fR delete these files.
.IP "\fBrestore\fR \fItarget_path [age]\fR" 8
.IX Item "restore target_path [age]"
Restore the backup to \fItarget_path\fR (as it was at \fIage\fR).
.IP "\fBfetch\fR \fIsrc_path target_path [age]\fR" 8
.IX Item "fetch src_path target_path [age]"
Restore single file/folder from backup (as it was at \fIage\fR).
.IP "\fBpre/post\fR" 8
.IX Item "pre/post"
execute the pre or post script of \fIprofile\fR (for debugging purposes).
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-\-force\fR" 4
.IX Item "--force"
Passed to duplicity (see commands: purge, purge-full, cleanup).
.IP "\fB\-\-preview\fR" 4
.IX Item "--preview"
Do nothing but print out generated duplicity command lines.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Init scduply:
.PP
.Vb 1
\&    scduply init
.Ve
.PP
  and then edit the resulting \fI~/.scduply/conf\fR file. You'll should to set at least TARGET and GPG_PW.
.PP
Create profile 'humbug':
.PP
.Vb 1
\&    scduply humbug create
.Ve
.PP
  and then edit at least \fIsource\fR and possible \fIexclude\fR files in \fI~/.scduply/humburg/\fR.
  The rules for the \fIexclude\fR file can be found in \fIman duplicity\fR, section \s-1FILE\s0 \s-1SELECTION\s0). In short:
      \- /absolute/path    \- exclude the file
      \+ /absolute/path    \- include the file
      \- **                \- exclude all (place this on the last row)
.PP
Backup 'humbug' now:
.PP
.Vb 1
\&    scduply humbug backup
.Ve
.PP
  you'll get the copy of the resulting logs and reports in \fI~/.scduply/log/humburg/\fR
(or in \fI/var/log/scduply/humburg\fR if scduply was configured in \fI/etc/scduply\fR).
.PP
List available backup sets of profile 'humbug':
.PP
.Vb 1
\&    scduply humbug status
.Ve
.PP
List and delete obsolete backup archives of 'humbug':
.PP
.Vb 1
\&    scduply humbug purge \-\-force
.Ve
.PP
Restore latest backup of 'humbug' to /mnt/restore:
.PP
.Vb 1
\&    scduply humbug restore /mnt/restore
.Ve
.PP
Restore /etc/passwd of 'humbug' from 4 days ago to /root/pw:
.PP
.Vb 1
\&    scduply humbug fetch etc/passwd /root/pw 4D
.Ve
.PP
  See \fIman duplicity\fR, section \s-1TIME\s0 \s-1FORMATS\s0 for the time format.
.PP
Backup all profiles at once:
.PP
.Vb 1
\&    scduply bkpall
.Ve
.PP
  Create the file \fI.skip\fR in the profile to exclude it from bkpall operation.
  Fill the MAIL_* settings in the global configuration file for receiving the nice reports.
.PP
A one line \fIbatch job\fR on 'humbug' for cron execution:
.PP
.Vb 1
\&    scduply humbug backup_verify_purge \-\-force
.Ve
.SH "FILES"
.IX Header "FILES"
Files in the profile folder(~/.scduply/<profile>):
.PP
.Vb 5
\&  conf .......... main configuration file
\&  pre ........... executed before a backup
\&  post .......... executed after a backup
\&  gpgkey.*.asc .. exported GPG key file(s)
\&  saved.env ..... exported settings (possible from the global config), which will be needed for restoring
\&  exclude ....... a globbing list of included or excluded files/folders
.Ve
.PP
The rules for the \fIexclude\fR file can be found in \fIman duplicity\fR, section \s-1FILE\s0 \s-1SELECTION\s0).
.PP
Logs:
.PP
The logs are placed in the \fI~/.scduply/log/<profile>\fR and are normally named with the timestamps of corresponding backups.
If the configuration is placed in \fI/etc/scduply\fR then the logs will go to \fI/var/log/scduply/<profile>\fR, but this may be configured.
.SH "IMPORTANT"
.IX Header "IMPORTANT"
Copy the \fIwhole\fR profile folder after the first backup to a safe place.
It contains everything needed to restore your backups. You will need 
it if you have to restore the backup from another system (e.g. after a 
system crash). Keep access to these files restricted as they contain 
\&\fIall\fR information (gpg data, ftp data) to access and modify your backups.
.PP
Repeat this step after \fIall\fR configuration changes. Some configuration 
options are crucial for restoration.
.SH "BUGS"
.IX Header "BUGS"
This program is still in development. If you find bugs write a bug report on:
  http://redmine.skycover.ru/projects/scduply-backup/.
.SH "AVAILABILITY"
.IX Header "AVAILABILITY"
For newer versions see http://github.com/skycover/scduply/.
.SH "COPYRIGHT and LICENSE"
.IX Header "COPYRIGHT and LICENSE"
Copyright (C) 2006 Christiane Ruetten, 2008\-2010 Edgar Soldin,
2011 Dmitry Chernyak
.PP
This package is free software; you can redistribute it and/or modify
it under the terms of the \s-1GNU\s0 General Public License version 2 as
published by the Free Software Foundation.
.PP
On Debian systems, the complete text of the \s-1GNU\s0 General
Public License version 2 can be found in `/usr/share/common\-licenses/GPL\-2'.
.SH "AUTHOR"
.IX Header "AUTHOR"
SkyCover Duply (scduply) is the Duply's fork made by Dmitry Chernyak.
Duply was written by Christiane Ruetten and Edgar Soldin.
.PP
This manual page was initially written by Joachim Wiedorn <ad_debian at joonet.de>
for duply and was revised for scduply by Dmitry Chernyak.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIduplicity\fR\|(1)
